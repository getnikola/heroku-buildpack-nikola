#!/usr/bin/env bash

# Fail fast and fail hard.
set -eo pipefail

# Paths.
BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
ROOT_DIR=$(dirname $BIN_DIR)
BUILD_DIR=/app/
CACHE_DIR=$2
CACHED_DIRS=".heroku"
WORKING_DIR=$(pwd)
VIRTUALENV_LOC=".heroku/venv"

export PATH=$BUILD_DIR/.heroku/python/bin:$PATH
export PYTHONUNBUFFERED=1
export LANG=en_US.UTF-8
export LIBRARY_PATH=/app/.heroku/vendor/lib
export LD_LIBRARY_PATH=/app/.heroku/vendor/lib

source $BIN_DIR/utils

set-env PATH '$HOME/.heroku/python/bin:$PATH'
set-env PYTHONUNBUFFERED true
set-env PYTHONHOME /app/.heroku/python
set-default-env LIBRARY_PATH /app/.heroku/vendor/lib
set-default-env LD_LIBRARY_PATH /app/.heroku/vendor/lib
set-default-env LANG en_US.UTF-8
set-default-env PYTHONHASHSEED random
set-default-env PYTHONPATH /app/

rm -fr $CACHE_DIR

mkdir -p $CACHE_DIR

# Versions.
PYTHON_VERSION="python-2.7.5"
DISTRIBUTE_VERSION="distribute-0.6.49"
PIP_VERSION="pip-1.3.1"


if [[ ! -d "$CACHE_DIR/$PYTHON_VERSION" ]]; then
  cd $CACHE_DIR
  puts-step "Installing Python ($PYTHON_VERSION)"
  curl http://envy-versions.s3.amazonaws.com/$PYTHON_VERSION.tar.bz2 -s | tar jx &> /dev/null
  mv python $PYTHON_VERSION
fi

export PATH=$CACHE_DIR/$PYTHON_VERSION/bin:$PATH

if [[ ! -d "$CACHE_DIR/$DISTRIBUTE_VERSION" ]]; then
  cd $CACHE_DIR
  puts-step "Installing Distribute ($DISTRIBUTE_VERSION)"
  curl https://pypi.python.org/packages/source/d/distribute/$DISTRIBUTE_VERSION.tar.gz -s | tar xz &> /dev/null
  cd $DISTRIBUTE_VERSION
  python setup.py install &> /dev/null
fi

if [[ ! -d "$CACHE_DIR/$PIP_VERSION" ]]; then
  cd $CACHE_DIR
  puts-step "Install pip ($PIP_VERSION)"
  curl https://pypi.python.org/packages/source/p/pip/$PIP_VERSION.tar.gz -s | tar xz &> /dev/null
  cd $PIP_VERSION
  python setup.py install &> /dev/null
fi

cd $BUILD_DIR

puts-step "Installing Nikola using pip ($PIP_VERSION)"
pip install --use-mirrors nikola | indent

puts-step "Running Nikola"
nikola build | indent
